apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: gateway-lunchbadger-dev
  labels:
    producer: lunchbadger
    environment: dev
spec:
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: gateway
        producer: lunchbadger
        environment: dev
    spec:
      containers:
        - name: gateway
          image: 410240865662.dkr.ecr.us-west-2.amazonaws.com/gateway:0.0.4
          imagePullPolicy: Always
          ports:
            - containerPort: 443
          volumeMounts:
            - mountPath: /etc/lunchbadger
              name: config
              readOnly: true
            - mountPath: /etc/lunchbadger-tls
              name: lunchbadger-tls
              readOnly: true
          env:
            - name: DEBUG
              value: gateway:*
      volumes:
        - name: config
          configMap:
            name: gateway-lunchbadger-dev
        - name: lunchbadger-tls
          secret:
            secretName: lunchbadger-tls
      # It is not possible for the gateway to use hostPort to expose itself
      # on the host as this does not work with CNI, so hostNetwork has to be
      # used.
      # (see https://github.com/kubernetes/kubernetes/issues/23920)
      hostNetwork: true
      nodeSelector:
        lunchbadger.com/node-type: public
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-lunchbadger-dev
  namespace: default
  labels:
    producer: lunchbadger
    environment: dev
  annotations:
    config-revision: <tbd>
data:
  gateway.conf: |-
    {
      "bindPort": 443,
      "bindHost": "0.0.0.0",
      "serviceEndpoints": {
        "backend": {
          "url": "http://10.3.0.11"
        }
      },
      "tls": {
        "*.lunchbadger.io": {
          "key": "/etc/lunchbadger-tls/lunchbadger.io.key.pem",
          "cert": "/etc/lunchbadger-tls/lunchbadger.io.cert.pem"
        },
        "api.lunchbadger.com": {
          "key": "/etc/lunchbadger-tls/lunchbadger.com.key.pem",
          "cert": "/etc/lunchbadger-tls/lunchbadger.com.cert.pem"
        },
        "default": {
          "key": "/etc/lunchbadger-tls/lunchbadger.io.key.pem",
          "cert": "/etc/lunchbadger-tls/lunchbadger.io.cert.pem"
        }
      },
      "pipelines": [
        {
          "name": "lunchbadger-api",
          "apiEndpoints": [
            { "path": "/" }
          ],
          "policies": [
            {
              "condition": ["always"],
              "action": "cors",
              "params": {
                "origin": ["http://localhost:8000", "https://app.lunchbadger.com"],
                "credentials": true
              }
            },
            {
              "condition": ["pathMatch", "/[^/]+/explorer$"],
              "action": "rewrite",
              "params": {
                "match": "/explorer$",
                "replace": "/explorer/",
                "redirect": 301
              }
            },
            {
              "condition": ["not",
                ["oneOf",
                  ["allOf",
                    ["hostMatch", "*.lunchbadger.io"],
                    ["not", ["hostMatch", "internal-*.lunchbadger.io"]]
                  ],
                  ["allOf",
                    ["hostMatch", "api.lunchbadger.com"],
                    ["pathMatch", "^/git"]
                  ]
                ]
              ],
              "action": "jwt",
              "params": {
                "issuer": "https://www.lunchbadger.com",
                "audience": "4kzhU5LqlUpQJmjbMevWkWyt9adeKK",
                "algorithms": ["RS256"],
                "key": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7ATrA/pvXdzabRID6pBA\nA+i2zez6FG3SXw5peAV2oQUmd64JbO2vUMih4PIt5D/o6gHfzQDwI/5e8wpiNKKp\n81dpvy3uYecyfGT4x+FYQ4xj0p7dnczPlp5t1ottCXYQyyB07UZ4UsOT063CRhgi\n00HhlURBm+yjLwnlZv/VGDNzXNFX1+t+PbGC5Ab7R02Fsnp8TGfjUgzA6NDgerKi\nJcq/fSxRb5WSB/gscCGGWjvgIJrHOLI9ofaXFpoHCxePCsVkaR0JNz8Q89tIWvWv\n5msm062aD7y1ThfP6I3HeGf3dT6IavLOVD6Wk82/WN+aaQ7BKOstglWqzjJvcEvU\nOQIDAQAB\n-----END PUBLIC KEY-----"
              }
            },
            {
              "condition": ["always"],
              "action": "proxy",
              "params": {
                "serviceEndpoint": "backend"
              }
            }
          ]
        }
      ]
    }
